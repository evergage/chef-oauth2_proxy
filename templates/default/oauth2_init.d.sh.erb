#!/bin/bash

### BEGIN INIT INFO
# Provides:          oauth2-proxy
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start oauth2-proxy at boot time.
# Description:       A reverse proxy that provides authentication with Google, Github or other provider.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="A reverse proxy that provides authentication with Google, Github or other provider"
NAME=`basename $0`
DAEMON=/usr/local/bin/oauth2_proxy
DAEMON_ARGS="-config=<%= @config_path %>"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/oauth2-proxy
USER=<%= @user %>
GROUP=$USER

# Tee all output from the script to syslog (/var/log/messages).
exec 1> >(logger --priority user.notice --stderr --tag $NAME 2>&1)
exec 2> >(logger --priority user.error --stderr --tag $NAME)

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

. /etc/rc.d/init.d/functions

__pids_pidof() {
    pidof -c -m -o $$ -o $PPID -o %PPID -x "$1" || \
        pidof -c -m -o $$ -o $PPID -o %PPID -x "${1##*/}"
}

do_start()
{
    # oauth2-proxy does not provide a daemon option, so use nohup to daemonize.
    daemon --user $USER "nohup $DAEMON $DAEMON_ARGS 1> >(logger --priority user.notice --stderr --tag $NAME 2>&1) 2> >(logger --priority user.error --stderr --tag $NAME) &"
    pid=$(__pids_pidof $DAEMON)
    if [ -n "${pid}" ]; then
        echo $pid > $PIDFILE
        return 0
    else
        return 1
    fi
}

do_stop()
{
    killproc -p $PIDFILE $NAME
    return $?
}

do_reload() {
    killproc -p $PIDFILE $NAME -HUP
    return $?
}

case "$1" in
  start)
    do_start
    case "$?" in
        0|1) exit 0 ;;
        2) exit 1 ;;
    esac
    ;;
  stop)
    do_stop
    case "$?" in
        0|1) exit 0 ;;
        2) exit 1 ;;
    esac
    ;;
  status)
    status -p $PIDFILE $NAME
    exit $?
    ;;
  restart|force-reload)
    do_stop
    case "$?" in
      0|1)
        do_start
        exit $?
        ;;
      *)
        # Failed to stop
        exit 1
        ;;
    esac
    ;;
  *)
    echo "Usage: sudo $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
